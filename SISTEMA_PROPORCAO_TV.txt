================================================================================
        SISTEMA DE PROPORÇÃO DE CONTEÚDO POR TV - EXPO TV
================================================================================

Data: 31 de outubro de 2025
Versão: 1.0.0

================================================================================
RESUMO DA IMPLEMENTAÇÃO
================================================================================

✅ CONCLUÍDO: Sistema de configuração de proporção de exibição por TV

O sistema permite que o administrador configure individualmente cada TV para 
controlar a proporção de exibição de:
  1. Avisos
  2. Anúncios  
  3. Notícias (Layout 1: rodapé/banner | Layout 2: tela cheia)

================================================================================
MODELO DE DADOS
================================================================================

Tabela: tv
----------
Novos campos adicionados:

  • proporcao_avisos    (INT, padrão: 1)
    Quantidade de avisos a exibir por ciclo

  • proporcao_anuncios  (INT, padrão: 5)
    Quantidade de anúncios a exibir por ciclo

  • proporcao_noticias  (INT, padrão: 3)
    Quantidade de notícias a exibir
    Layout 1: Exibidas em rodapé/banner
    Layout 2: Exibidas em tela cheia

Configuração Padrão: 1:5:3 (1 aviso : 5 anúncios : 3 notícias)

================================================================================
MIGRATION EXECUTADA
================================================================================

Arquivo: migrate_tv_proporcoes.py

SQL executado:
--------------
ALTER TABLE tv ADD COLUMN proporcao_avisos INT NOT NULL DEFAULT 1;
ALTER TABLE tv ADD COLUMN proporcao_anuncios INT NOT NULL DEFAULT 5;
ALTER TABLE tv ADD COLUMN proporcao_noticias INT NOT NULL DEFAULT 3;

Status: ✅ Executada com sucesso
TVs atualizadas: 5 TVs

================================================================================
ENDPOINTS DA API
================================================================================

1. ATUALIZAR CONFIGURAÇÃO DA TV
---------------------------------
PUT /tvs/{tv_id}/config
Content-Type: application/json
Authorization: Bearer {token}

Body:
{
  "proporcao_avisos": 2,
  "proporcao_anuncios": 10,
  "proporcao_noticias": 5
}

Resposta:
{
  "success": true,
  "tv_id": 8,
  "nome": "TV Portaria",
  "config": {
    "proporcao_avisos": 2,
    "proporcao_anuncios": 10,
    "proporcao_noticias": 5,
    "descricao": "2 aviso(s) : 10 anúncio(s) : 5 notícia(s)"
  }
}


2. OBTER CONFIGURAÇÃO ATUAL DA TV
-----------------------------------
GET /tvs/{tv_id}/config
Authorization: Bearer {token}

Resposta:
{
  "tv_id": 8,
  "nome": "TV Portaria",
  "codigo_conexao": "12345",
  "config": {
    "proporcao_avisos": 1,
    "proporcao_anuncios": 5,
    "proporcao_noticias": 3,
    "descricao": "1 aviso(s) : 5 anúncio(s) : 3 notícia(s)"
  }
}


3. OBTER CONTEÚDO INTERCALADO (APP DA TV)
-------------------------------------------
GET /app/tv/{codigo_conexao}/content

Este é o endpoint que o app da TV deve usar!

Resposta:
{
  "success": true,
  "tv": {
    "id": 8,
    "nome": "TV Portaria",
    "codigo_conexao": "12345",
    "template": "layout1"
  },
  "config": {
    "proporcao_avisos": 1,
    "proporcao_anuncios": 5,
    "proporcao_noticias": 0,
    "descricao": "1 aviso(s) : 5 anúncio(s)"
  },
  "content": [
    {
      "type": "aviso",
      "data": {
        "id": 1,
        "nome": "Aviso importante",
        "mensagem": "Reunião amanhã às 19h",
        "archive_url": "https://...",
        ...
      }
    },
    {
      "type": "anuncio",
      "data": {
        "id": 5,
        "nome": "Promoção especial",
        "archive_url": "https://...",
        "tempo_exibicao": 10,
        ...
      }
    },
    {
      "type": "anuncio",
      "data": { ... }
    },
    ...
  ],
  "stats": {
    "total_items": 15,
    "avisos": 3,
    "anuncios": 12,
    "noticias": 0
  }
}

================================================================================
COMO FUNCIONA A INTERCALAÇÃO
================================================================================

Exemplo 1: Proporção 1:5 (1 aviso : 5 anúncios)
-------------------------------------------------
Ordem de exibição:
  1. Aviso #1
  2. Anúncio #1
  3. Anúncio #2
  4. Anúncio #3
  5. Anúncio #4
  6. Anúncio #5
  7. Aviso #2
  8. Anúncio #6
  9. Anúncio #7
  10. Anúncio #8
  11. Anúncio #9
  12. Anúncio #10
  13. Aviso #3
  ... (continua até acabar o conteúdo)


Exemplo 2: Proporção 2:3 (2 avisos : 3 anúncios)
--------------------------------------------------
Ordem de exibição:
  1. Aviso #1
  2. Aviso #2
  3. Anúncio #1
  4. Anúncio #2
  5. Anúncio #3
  6. Aviso #3
  7. Aviso #4
  8. Anúncio #4
  ... (continua)


Exemplo 3: Layout 2 com Notícias (1:5:3)
------------------------------------------
Ordem de exibição:
  1. Aviso #1
  2. Anúncio #1
  3. Anúncio #2
  4. Anúncio #3
  5. Anúncio #4
  6. Anúncio #5
  ... (continua intercalando avisos e anúncios)
  N-2. Notícia #1 (tela cheia)
  N-1. Notícia #2 (tela cheia)
  N. Notícia #3 (tela cheia)


Exemplo 4: Layout 1 com Notícias (1:5:3)
------------------------------------------
Ordem de exibição:
  1. Aviso #1 (notícias no rodapé)
  2. Anúncio #1 (notícias no rodapé)
  3. Anúncio #2 (notícias no rodapé)
  4. Anúncio #3 (notícias no rodapé)
  5. Anúncio #4 (notícias no rodapé)
  6. Anúncio #5 (notícias no rodapé)
  ... (as 3 notícias ficam alternando no rodapé durante toda exibição)

IMPORTANTE: Notícias são retornadas para AMBOS os layouts, mas exibidas de forma diferente

================================================================================
CASOS DE USO
================================================================================

1. SHOPPING/MALL
-----------------
{
  "proporcao_avisos": 1,
  "proporcao_anuncios": 10,
  "proporcao_noticias": 2
}
Foco: Anúncios comerciais (vendas)
Poucos avisos institucionais
Poucas notícias


2. CONDOMÍNIO RESIDENCIAL
---------------------------
{
  "proporcao_avisos": 3,
  "proporcao_anuncios": 5,
  "proporcao_noticias": 5
}
Foco: Equilíbrio entre informações do condomínio e parceiros
Mais notícias para entreter moradores


3. ACADEMIA/CLUBE
------------------
{
  "proporcao_avisos": 2,
  "proporcao_anuncios": 8,
  "proporcao_noticias": 3
}
Foco: Muitos anúncios de parceiros
Avisos de horários/eventos
Notícias esportivas


4. DESABILITAR AVISOS (SÓ ANÚNCIOS)
-------------------------------------
{
  "proporcao_avisos": 0,
  "proporcao_anuncios": 1,
  "proporcao_noticias": 0
}
Resultado: Apenas anúncios (sem avisos nem notícias)


5. DESABILITAR ANÚNCIOS (SÓ AVISOS)
-------------------------------------
{
  "proporcao_avisos": 1,
  "proporcao_anuncios": 0,
  "proporcao_noticias": 0
}
Resultado: Apenas avisos (sem anúncios nem notícias)


6. DESABILITAR NOTÍCIAS (Layout 2)
-------------------------------------
{
  "proporcao_avisos": 1,
  "proporcao_anuncios": 5,
  "proporcao_noticias": 0
}
Resultado: Apenas avisos e anúncios (sem notícias)
⚠️ Útil para Layout 2 quando não quiser notícias em tela cheia

================================================================================
IMPLEMENTAÇÃO NO FRONTEND (ADMIN)
================================================================================

JavaScript para atualizar configuração:
-----------------------------------------

async function salvarConfigTV(tvId, avisos, anuncios, noticias) {
  const response = await fetch(`/tvs/${tvId}/config`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    },
    body: JSON.stringify({
      proporcao_avisos: avisos,
      proporcao_anuncios: anuncios,
      proporcao_noticias: noticias
    })
  });
  
  const data = await response.json();
  
  if (data.success) {
    alert('Configuração salva com sucesso!');
    console.log('Descrição:', data.config.descricao);
  }
}


JavaScript para buscar configuração:
--------------------------------------

async function buscarConfigTV(tvId) {
  const response = await fetch(`/tvs/${tvId}/config`, {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  
  const data = await response.json();
  
  document.getElementById('avisos').value = data.config.proporcao_avisos;
  document.getElementById('anuncios').value = data.config.proporcao_anuncios;
  document.getElementById('noticias').value = data.config.proporcao_noticias;
  
  console.log('Configuração:', data.config.descricao);
}

================================================================================
IMPLEMENTAÇÃO NO APP DA TV
================================================================================

React Native / JavaScript:
----------------------------

async function buscarConteudoTV() {
  // Buscar código de conexão do storage local
  const codigoConexao = await AsyncStorage.getItem('codigo_conexao');
  
  // Chamar endpoint de conteúdo intercalado
  const response = await fetch(
    `https://api.expotv.com/app/tv/${codigoConexao}/content`
  );
  
  const data = await response.json();
  
  console.log('Configuração da TV:', data.config.descricao);
  console.log('Total de itens:', data.stats.total_items);
  console.log('Avisos:', data.stats.avisos);
  console.log('Anúncios:', data.stats.anuncios);
  console.log('Notícias:', data.stats.noticias);
  
  // Iniciar exibição
  iniciarExibicao(data.content);
}


function iniciarExibicao(content) {
  let index = 0;
  
  function proximoItem() {
    // Reiniciar loop quando terminar
    if (index >= content.length) {
      index = 0;
    }
    
    const item = content[index];
    
    // Determinar duração baseado no tipo
    let duracao;
    switch(item.type) {
      case 'anuncio':
        // Usar tempo_exibicao do anúncio (em segundos)
        duracao = item.data.tempo_exibicao * 1000;
        break;
      case 'aviso':
        duracao = 5000; // 5 segundos
        break;
      case 'noticia':
        duracao = 8000; // 8 segundos
        break;
    }
    
    // Exibir item na tela
    exibirItem(item);
    
    // Agendar próximo item
    setTimeout(proximoItem, duracao);
    
    index++;
  }
  
  // Iniciar
  proximoItem();
}


function exibirItem(item) {
  switch(item.type) {
    case 'aviso':
      exibirAviso(item.data);
      break;
    case 'anuncio':
      exibirAnuncio(item.data);
      break;
    case 'noticia':
      exibirNoticia(item.data);
      break;
  }
}

================================================================================
VALIDAÇÕES
================================================================================

✅ Proporção mínima: 0 (pode desabilitar avisos, anúncios ou notícias)
✅ Proporção máxima: Ilimitada
✅ Valores devem ser inteiros positivos ou zero
✅ Notícias são retornadas para ambos layouts (1 e 2)
✅ Layout 1: Notícias exibidas em rodapé/banner
✅ Layout 2: Notícias exibidas em tela cheia
✅ Se proporcao_noticias == 0: NÃO retorna notícias (array vazio)
✅ Se não houver conteúdo suficiente, ciclo termina antes
✅ Content vazio retorna array vazio (não dá erro)

================================================================================
ARQUIVOS MODIFICADOS/CRIADOS
================================================================================

Modificados:
------------
• app/models.py
  - Adicionados campos proporcao_avisos, proporcao_anuncios, proporcao_noticias

• app/endpoints/tvs.py
  - Adicionado schema TVConfigProporcao
  - Adicionado endpoint PUT /tvs/{tv_id}/config
  - Adicionado endpoint GET /tvs/{tv_id}/config

• app/endpoints/app.py
  - Adicionado import TV
  - Adicionado endpoint GET /app/tv/{codigo_conexao}/content

Criados:
--------
• migrate_tv_proporcoes.py
  - Script de migração SQL

• TV_PROPORCAO_GUIDE.md
  - Documentação completa em Markdown

• SISTEMA_PROPORCAO_TV.txt
  - Este arquivo (documentação em texto puro)

================================================================================
PRÓXIMOS PASSOS
================================================================================

1. ⏳ FRONTEND ADMIN
   - Criar interface para configurar proporções
   - Adicionar campos de input para avisos:anuncios:noticias
   - Adicionar preview visual da proporção
   - Salvar configuração via PUT /tvs/{id}/config

2. ⏳ APP DA TV
   - Atualizar para usar endpoint /app/tv/{codigo}/content
   - Implementar sistema de loop de conteúdo
   - Respeitar tempo_exibicao de cada anúncio
   - Implementar transições suaves entre itens

3. ⏳ TESTES
   - Testar diferentes proporções
   - Testar com pouco conteúdo (menos que proporção)
   - Testar com muito conteúdo
   - Testar layout 1 vs layout 2
   - Testar proporção 0:X e X:0

4. ⏳ MELHORIAS FUTURAS
   - Adicionar proporção por horário (manhã, tarde, noite)
   - Adicionar priorização de avisos urgentes
   - Adicionar analytics de visualizações
   - Adicionar preview da sequência no admin

================================================================================
SUPORTE
================================================================================

Documentação completa: TV_PROPORCAO_GUIDE.md
API Docs: https://expotv-backend.fly.dev/docs
Endpoint de teste: GET /tvs/{tv_id}/config

================================================================================
FIM DO DOCUMENTO
================================================================================
