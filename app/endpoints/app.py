from fastapi import APIRouter, Depends, HTTPException, Query
from sqlmodel import Session, select
from typing import List, Optional, Union
from app.db import engine
from app.models import Anuncio, Aviso, TV
from pydantic import BaseModel
import requests
import logging

router = APIRouter()

def get_session():
    with Session(engine) as session:
        yield session

class NewsItem(BaseModel):
    title: str
    description: Optional[str] = None
    url: str
    urlToImage: Optional[str] = None
    publishedAt: str
    source: str

def get_jovempan_news(limit: int = 15) -> List[NewsItem]:
    """
    Busca not√≠cias APENAS da Jovem Pan
    Retorna at√© 15 not√≠cias por padr√£o
    """
    try:
        from datetime import datetime
        import re
        
        news_items = []
        
        # Buscar RSS da Jovem Pan
        response = requests.get(
            'https://api.rss2json.com/v1/api.json',
            params={'rss_url': 'https://jovempan.com.br/feed/'},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            items = data.get('items', [])
            
            # A API retorna 10 por padr√£o, mas vamos pegar quantos vier
            for item in items[:limit]:
                # Limpar HTML da descri√ß√£o
                description = item.get('description', '')
                description = re.sub('<[^<]+?>', '', description).strip()
                
                if len(description) > 200:
                    description = description[:200] + "..."
                
                # Extrair imagem
                thumbnail = item.get('thumbnail', '')
                if not thumbnail and 'enclosure' in item:
                    thumbnail = item.get('enclosure', {}).get('link', '')
                
                news_item = NewsItem(
                    title=item.get('title', '').strip(),
                    description=description,
                    url=item.get('link', ''),
                    urlToImage=thumbnail,
                    publishedAt=item.get('pubDate', datetime.now().isoformat() + "Z"),
                    source='üéôÔ∏è Jovem Pan'
                )
                
                if news_item.title:
                    news_items.append(news_item)
        
        return news_items
        
    except Exception as e:
        logging.error(f"Erro ao buscar not√≠cias da Jovem Pan: {e}")
        return []

class AppContent(BaseModel):
    anuncios: List[Anuncio] = []
    avisos: List[Aviso] = []
    news: List[NewsItem] = []
    total_anuncios: int = 0
    total_avisos: int = 0
    total_news: int = 0

@router.get("/app/content/{condominio_id}", 
    summary="üì± Conte√∫do do App", 
    description="Retorna todos os an√∫ncios, avisos e not√≠cias para um condom√≠nio espec√≠fico",
    response_description="An√∫ncios, avisos e not√≠cias do condom√≠nio",
    response_model=AppContent
)
def get_app_content(
    condominio_id: int,
    status: Optional[str] = Query("Ativo", description="Status dos conte√∫dos (padr√£o: Ativo)"),
    include_news: bool = Query(True, description="Incluir not√≠cias da Jovem Pan"),
    news_limit: int = Query(15, description="N√∫mero m√°ximo de not√≠cias (padr√£o: 15)"),
    session: Session = Depends(get_session)
):
    """
    Retorna conte√∫do para o app mobile/TV
    
    - **condominio_id**: ID do condom√≠nio
    - **status**: Status dos conte√∫dos (padr√£o: Ativo)
    - **include_news**: Se deve incluir not√≠cias da Jovem Pan üéôÔ∏è
    - **news_limit**: N√∫mero m√°ximo de not√≠cias (padr√£o: 15)
    
    Busca an√∫ncios e avisos onde o condom√≠nio est√° na lista de condom√≠nios_ids
    Tamb√©m busca not√≠cias da Jovem Pan
    
    ‚è±Ô∏è Cada an√∫ncio retorna o campo `tempo_exibicao` em segundos para controle de rota√ß√£o na TV
    """
    
    # Buscar an√∫ncios que incluem este condom√≠nio
    anuncios = session.exec(
        select(Anuncio).where(
            Anuncio.status == status,
            Anuncio.condominios_ids.like(f"%{condominio_id}%")
        )
    ).all()
    
    # Filtrar an√∫ncios que realmente cont√™m o condom√≠nio (verifica√ß√£o mais precisa)
    anuncios_filtrados = []
    for anuncio in anuncios:
        condominios_list = [int(id.strip()) for id in anuncio.condominios_ids.split(',') if id.strip().isdigit()]
        if condominio_id in condominios_list:
            anuncios_filtrados.append(anuncio)
    
    # Buscar avisos que incluem este condom√≠nio
    avisos = session.exec(
        select(Aviso).where(
            Aviso.status == status,
            Aviso.condominios_ids.like(f"%{condominio_id}%")
        )
    ).all()
    
    # Filtrar avisos que realmente cont√™m o condom√≠nio (verifica√ß√£o mais precisa)
    avisos_filtrados = []
    for aviso in avisos:
        condominios_list = [int(id.strip()) for id in aviso.condominios_ids.split(',') if id.strip().isdigit()]
        if condominio_id in condominios_list:
            avisos_filtrados.append(aviso)
    
    # Buscar not√≠cias se solicitado (sempre da Jovem Pan)
    news_items = []
    if include_news:
        news_items = get_jovempan_news(limit=news_limit)
    
    return AppContent(
        anuncios=anuncios_filtrados,
        avisos=avisos_filtrados,
        news=news_items,
        total_anuncios=len(anuncios_filtrados),
        total_avisos=len(avisos_filtrados),
        total_news=len(news_items)
    )

@router.get("/app/anuncios/{condominio_id}", 
    summary="üì¢ An√∫ncios do Condom√≠nio", 
    description="Retorna apenas an√∫ncios de um condom√≠nio espec√≠fico com tempo de exibi√ß√£o individual",
    response_description="Lista de an√∫ncios com tempo_exibicao (em segundos)"
)
def get_anuncios_condominio(
    condominio_id: int,
    status: Optional[str] = Query("Ativo", description="Status dos an√∫ncios"),
    session: Session = Depends(get_session)
):
    """
    Retorna an√∫ncios espec√≠ficos de um condom√≠nio
    
    ‚è±Ô∏è Cada an√∫ncio inclui o campo `tempo_exibicao` em segundos
    """
    anuncios = session.exec(
        select(Anuncio).where(
            Anuncio.status == status,
            Anuncio.condominios_ids.like(f"%{condominio_id}%")
        )
    ).all()
    
    # Filtrar precisamente
    anuncios_filtrados = []
    for anuncio in anuncios:
        condominios_list = [int(id.strip()) for id in anuncio.condominios_ids.split(',') if id.strip().isdigit()]
        if condominio_id in condominios_list:
            anuncios_filtrados.append(anuncio)
    
    return {"anuncios": anuncios_filtrados, "total": len(anuncios_filtrados)}

@router.get("/app/avisos/{condominio_id}", 
    summary="üìã Avisos do Condom√≠nio", 
    description="Retorna apenas avisos de um condom√≠nio espec√≠fico",
    response_description="Lista de avisos"
)
def get_avisos_condominio(
    condominio_id: int,
    status: Optional[str] = Query("Ativo", description="Status dos avisos"),
    session: Session = Depends(get_session)
):
    """
    Retorna avisos espec√≠ficos de um condom√≠nio
    """
    avisos = session.exec(
        select(Aviso).where(
            Aviso.status == status,
            Aviso.condominios_ids.like(f"%{condominio_id}%")
        )
    ).all()
    
    # Filtrar precisamente
    avisos_filtrados = []
    for aviso in avisos:
        condominios_list = [int(id.strip()) for id in aviso.condominios_ids.split(',') if id.strip().isdigit()]
        if condominio_id in condominios_list:
            avisos_filtrados.append(aviso)
    
    return {"avisos": avisos_filtrados, "total": len(avisos_filtrados)}

@router.get("/app/news", 
    summary="üì∞ Not√≠cias Jovem Pan", 
    description="Retorna not√≠cias da Jovem Pan",
    response_description="Lista de not√≠cias da Jovem Pan"
)
def get_news_endpoint(
    limit: int = Query(10, description="N√∫mero m√°ximo de not√≠cias", ge=1, le=50)
):
    """
    Retorna not√≠cias APENAS da Jovem Pan
    """
    news_items = get_jovempan_news(limit=limit)
    return {"news": news_items, "total": len(news_items), "source": "üéôÔ∏è Jovem Pan"}

@router.get("/app/status", 
    summary="üìä Status do Sistema", 
    description="Retorna estat√≠sticas gerais do sistema",
    response_description="Estat√≠sticas do sistema"
)
def get_app_status(session: Session = Depends(get_session)):
    """
    Retorna estat√≠sticas do sistema incluindo disponibilidade de not√≠cias
    """
    total_anuncios = len(session.exec(select(Anuncio)).all())
    total_avisos = len(session.exec(select(Aviso)).all())
    anuncios_ativos = len(session.exec(select(Anuncio).where(Anuncio.status == "Ativo")).all())
    avisos_ativos = len(session.exec(select(Aviso).where(Aviso.status == "Ativo")).all())
    
    # Testar disponibilidade de not√≠cias
    news_available = True
    news_count = 0
    try:
        news_items = get_jovempan_news(limit=5)
        news_count = len(news_items)
    except Exception as e:
        news_available = False
        logging.error(f"Erro ao verificar not√≠cias: {e}")
    
    return {
        "anuncios": {
            "total": total_anuncios,
            "ativos": anuncios_ativos,
            "inativos": total_anuncios - anuncios_ativos
        },
        "avisos": {
            "total": total_avisos,
            "ativos": avisos_ativos,
            "inativos": total_avisos - avisos_ativos
        },
        "news": {
            "available": news_available,
            "sample_count": news_count
        }
    }

@router.get("/app/jovempan", 
    summary="üéôÔ∏è Not√≠cias Jovem Pan", 
    description="Retorna not√≠cias exclusivas da Jovem Pan",
    response_description="Lista de not√≠cias da Jovem Pan"
)
def get_jovempan_endpoint(
    limit: int = Query(10, description="N√∫mero m√°ximo de not√≠cias", ge=1, le=50)
):
    """
    Retorna not√≠cias exclusivas do feed RSS da Jovem Pan
    
    Fonte: https://jovempan.com.br/feed/
    """
    try:
        from datetime import datetime
        import re
        
        news_items = []
        
        # Buscar RSS da Jovem Pan
        response = requests.get(
            'https://api.rss2json.com/v1/api.json',
            params={'rss_url': 'https://jovempan.com.br/feed/'},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            items = data.get('items', [])
            
            for item in items[:limit]:
                # Limpar HTML da descri√ß√£o
                description = item.get('description', '')
                description = re.sub('<[^<]+?>', '', description)
                description = description.strip()
                
                if len(description) > 200:
                    description = description[:200] + "..."
                
                # Extrair imagem
                thumbnail = item.get('thumbnail', '')
                if not thumbnail and 'enclosure' in item:
                    thumbnail = item.get('enclosure', {}).get('link', '')
                
                news_item = NewsItem(
                    title=item.get('title', '').strip(),
                    description=description,
                    url=item.get('link', ''),
                    urlToImage=thumbnail,
                    publishedAt=item.get('pubDate', datetime.now().isoformat() + "Z"),
                    source='üéôÔ∏è Jovem Pan'
                )
                
                if news_item.title:
                    news_items.append(news_item)
        
        return {
            "news": news_items,
            "total": len(news_items),
            "source": "Jovem Pan",
            "feed_url": "https://jovempan.com.br/"
        }
        
    except Exception as e:
        logging.error(f"Erro ao buscar not√≠cias da Jovem Pan: {e}")
        return {
            "news": [],
            "total": 0,
            "source": "Jovem Pan",
            "error": str(e)
        }

@router.get("/app/tv/{codigo_conexao}/content",
    summary="üì∫ Conte√∫do Intercalado por TV",
    description="Retorna conte√∫do (avisos, an√∫ncios, not√≠cias) intercalado de acordo com a propor√ß√£o configurada da TV"
)
def get_tv_intercalated_content(
    codigo_conexao: str,
    session: Session = Depends(get_session)
):
    """
    Retorna conte√∫do intercalado baseado nas configura√ß√µes da TV
    
    **Como funciona:**
    1. Busca a TV pelo c√≥digo de conex√£o
    2. Obt√©m as configura√ß√µes de propor√ß√£o (avisos:an√∫ncios:not√≠cias)
    3. Busca avisos e an√∫ncios do condom√≠nio da TV
    4. Intercala o conte√∫do na propor√ß√£o configurada
    5. Adiciona not√≠cias no final (se configurado)
    
    **Layout 1**: Not√≠cias s√£o exibidas em rodap√©/banner
    **Layout 2**: Not√≠cias s√£o exibidas em tela cheia
    
    **Exemplo de propor√ß√£o 1:5:3:**
    - 1 aviso
    - 5 an√∫ncios
    - 1 aviso
    - 5 an√∫ncios
    - ... (repete)
    - 3 not√≠cias (no final)
    
    **Resposta:**
    ```json
    {
        "content": [...],  // Lista intercalada de avisos, an√∫ncios e not√≠cias
        "config": {
            "proporcao_avisos": 1,
            "proporcao_anuncios": 5,
            "proporcao_noticias": 3
        },
        "stats": {
            "total_items": 15,
            "avisos": 5,
            "anuncios": 7,
            "noticias": 3
        }
    }
    ```
    
    Cada item retornado tem:
    - **type**: "aviso", "anuncio" ou "noticia"
    - **data**: Objeto com os dados do conte√∫do
    """
    
    # 1. Buscar TV
    tv = session.exec(select(TV).where(TV.codigo_conexao == codigo_conexao)).first()
    if not tv:
        raise HTTPException(status_code=404, detail="TV n√£o encontrada com este c√≥digo")
    
    # 2. Buscar avisos do condom√≠nio
    avisos_query = session.exec(
        select(Aviso).where(
            Aviso.status.ilike("Ativo"),
            Aviso.condominios_ids.like(f"%{tv.condominio_id}%")
        )
    ).all()
    
    # Filtrar avisos que realmente cont√™m o condom√≠nio
    avisos = []
    for aviso in avisos_query:
        cond_ids = [int(id.strip()) for id in aviso.condominios_ids.split(",") if id.strip()]
        if tv.condominio_id in cond_ids:
            avisos.append(aviso)
    
    # 3. Buscar an√∫ncios do condom√≠nio
    anuncios_query = session.exec(
        select(Anuncio).where(
            Anuncio.status == "Ativo",
            Anuncio.condominios_ids.like(f"%{tv.condominio_id}%")
        )
    ).all()
    
    # Filtrar an√∫ncios que realmente cont√™m o condom√≠nio
    anuncios = []
    for anuncio in anuncios_query:
        cond_ids = [int(id.strip()) for id in anuncio.condominios_ids.split(",") if id.strip()]
        if tv.condominio_id in cond_ids:
            anuncios.append(anuncio)
    
    # 4. Buscar not√≠cias (se propor√ß√£o configurada)
    # Layout 1: Exibe em rodap√©/banner
    # Layout 2: Exibe em tela cheia
    # Usando APENAS not√≠cias da Jovem Pan
    noticias = []
    if tv.proporcao_noticias > 0:
        logging.info(f"TV {tv.nome}: Buscando {tv.proporcao_noticias} not√≠cias da Jovem Pan")
        noticias = get_jovempan_news(limit=tv.proporcao_noticias)
        logging.info(f"TV {tv.nome}: {len(noticias)} not√≠cias encontradas da Jovem Pan")
    else:
        logging.info(f"TV {tv.nome}: proporcao_noticias = 0, pulando busca de not√≠cias")
    
    # 5. Intercalar conte√∫do
    content = []
    aviso_index = 0
    anuncio_index = 0
    
    # Calcular quantos ciclos precisamos
    total_cycles = max(
        (len(avisos) // tv.proporcao_avisos) if tv.proporcao_avisos > 0 else 0,
        (len(anuncios) // tv.proporcao_anuncios) if tv.proporcao_anuncios > 0 else 0,
        1  # Pelo menos 1 ciclo
    )
    
    for cycle in range(total_cycles + 1):
        # Adicionar avisos conforme propor√ß√£o
        for _ in range(tv.proporcao_avisos):
            if aviso_index < len(avisos):
                content.append({
                    "type": "aviso",
                    "data": avisos[aviso_index]
                })
                aviso_index += 1
        
        # Adicionar an√∫ncios conforme propor√ß√£o
        for _ in range(tv.proporcao_anuncios):
            if anuncio_index < len(anuncios):
                content.append({
                    "type": "anuncio",
                    "data": anuncios[anuncio_index]
                })
                anuncio_index += 1
        
        # Se n√£o tem mais conte√∫do, parar
        if aviso_index >= len(avisos) and anuncio_index >= len(anuncios):
            break
    
    # Adicionar not√≠cias no final
    # Layout 1: TV exibe em rodap√©/banner
    # Layout 2: TV exibe em tela cheia
    for noticia in noticias:
        content.append({
            "type": "noticia",
            "data": noticia
        })
    
    return {
        "success": True,
        "tv": {
            "id": tv.id,
            "nome": tv.nome,
            "codigo_conexao": tv.codigo_conexao,
            "template": tv.template
        },
        "config": {
            "proporcao_avisos": tv.proporcao_avisos,
            "proporcao_anuncios": tv.proporcao_anuncios,
            "proporcao_noticias": tv.proporcao_noticias,
            "descricao": f"{tv.proporcao_avisos} aviso(s) : {tv.proporcao_anuncios} an√∫ncio(s) : {tv.proporcao_noticias} not√≠cia(s)"
        },
        "content": content,
        "stats": {
            "total_items": len(content),
            "avisos": sum(1 for item in content if item["type"] == "aviso"),
            "anuncios": sum(1 for item in content if item["type"] == "anuncio"),
            "noticias": sum(1 for item in content if item["type"] == "noticia")
        }
    }
